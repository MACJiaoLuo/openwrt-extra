#!/bin/sh /etc/rc.common
# Copyright (C) 2015 ovh.com

START=90
STOP=10

USE_PROCD=1
PROG=/usr/sbin/glorytun.sh


validate_section() {
        uci_validate_section glorytun tunnel "${1}" \
		'enable:bool:0'        \
		'key:string'           \
		'server:string'        \
		'port:uinteger'        \
		'congestion:string'    \
		'delay:bool:0'         \
		'dev:string'           \
		'iplocal:string'       \
		'ippeer:string'        \
		'mtu:uinteger'         \
		'pref:uinteger'        \
		'table:uinteger'       \
		'metric:uinteger'      \
		'multiqueue:bool:0'    \
		'buffer_size:uinteger' \
		'noquickack:bool:0'
}

start_instance() {
	local s="${1}"
	validate_section "${1}" || {
                echo "validation failed"
                return 1
        }

	[ "$enable" = "1" ] || return 1
	[ -n "$server" ] || return 1
	[ -n "$port" ] || return 1
	[ -n "$key" ] || return 1
	[ -n "$iplocal" ] || return 1
	[ -n "$ippeer" ] || return 1
	[ -n "$dev" ] || return 1

	[ ! -d "/tmp/glorytun" ] && mkdir -p "/tmp/glorytun"

	echo -n "$key" > /tmp/glorytun/$s.key
	key=""

	if [ -z "$metric" ]; then
		metric=$(uci -q get network.$dev.metric)
	fi

	procd_open_instance
	procd_set_param command "$PROG" host $server port $port keyfile /tmp/glorytun/$s.key

	procd_set_param env dev=$dev iplocal=$iplocal ippeer=$ippeer

	[ -n "$table" ]         && procd_append_param env table=$table
	[ -n "$pref" ]          && procd_append_param env pref=$pref
	[ -n "$metric" ]        && procd_append_param env metric=$metric
	[ -n "$mtu" ]           && procd_append_param env mtu=$mtu
	[ -n "$congestion" ]    && procd_append_param command congestion $congestion
	[ -n "${buffer_size}" ] && procd_append_param command buffer-size "${buffer_size}"
	[ "$multiqueue" -eq 1 ] && procd_append_param command multiqueue
	[ "$delay" -eq 1 ]      && procd_append_param command delay
	[ "$noquickack" -eq 1 ] && procd_append_param command noquickack

	# if process dies sooner than respawn_threshold, it is considered crashed and
	# after respawn_retry retries the service is stopped
	# procd_set_param respawn ${respawn_threshold:-3600} ${respawn_timeout:-5} ${respawn_retry:-5}
	procd_set_param respawn 15 30 0
	procd_close_instance

}

start_service() {
        config_load 'glorytun'
        config_foreach start_instance 'tunnel'
}

